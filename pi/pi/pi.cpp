#include <iostream>
#include <cmath>
#include <random>
#include <chrono>
#include <fstream>
#include <string>

using namespace std;

// 用户提供的精确π值（截断前1000位）
const string PI_REFERENCE =
"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"
"8214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196"
"4428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273"
"7245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094"
"3305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912"
"9833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132"
"0005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235"
"4201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859"
"5024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303"
"5982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989"
"3809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151"
"557485724245415069595082953311686172785588907509838175463746493931255060400927701671139009848824012"
"8583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912"
"9331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279"
"6782354781636009341721641219924586315030286182974555706749838505494588586926995690927210797509302955"
"3211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000"
"8164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333"
"4547762416862518983569485562099219222184272550254256887671790494601653466804988627232791786085784383"
"82796797668145410095388378636095068006422512520511739298489608412848862694456042419652850222106611863"
"0674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009";

// ================== 蒙特卡洛方法 ==================
double monte_carlo_pi(int samples) {
    random_device rd;
    mt19937 generator(rd());
    uniform_real_distribution<double> distribution(-1.0, 1.0);

    int inside_circle = 0;

    for (int i = 0; i < samples; ++i) {
        double x = distribution(generator);
        double y = distribution(generator);
        if (x * x + y * y <= 1.0) {
            ++inside_circle;
        }
    }

    return 4.0 * inside_circle / samples;
}

// =============== 尼拉坎萨级数方法 ===============
double nilakantha_pi(int iterations) {
    double pi = 3.0;
    double sign = 1.0;

    for (int n = 2; n < iterations * 2; n += 2) {
        double denominator = n * (n + 1) * (n + 2);
        pi += sign * (4.0 / denominator);
        sign *= -1; // 交替符号
    }

    return pi;
}

// ================ 主程序 ================
int main() {
    const double PI = 3.14159265358979323846;
    int choice;
    int precision;

    cout << "=== 圆周率计算器 ===" << endl;
    cout << "1. 蒙特卡洛方法" << endl;
    cout << "2. 尼拉坎萨级数" << endl;
    cout << "选择计算方法 (1/2): ";
    cin >> choice;

    cout << "输入计算精度（蒙特卡洛样本数 或 级数迭代次数）: ";
    cin >> precision;

    auto start = chrono::high_resolution_clock::now();
    double result = 0;

    switch (choice) {
    case 1:
        result = monte_carlo_pi(precision);
        break;
    case 2:
        result = nilakantha_pi(precision);
        break;
    default:
        cout << "无效选择！" << endl;
        return 1;
    }

    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> duration = end - start;

    // 控制台输出
    cout.precision(15);
    cout << "\n计算结果: " << result << endl;
    cout << "双精度参考值: " << PI << endl;
    cout << "绝对误差: " << abs(result - PI) << endl;
    cout << "计算耗时: " << duration.count() << " 秒" << endl;

    // 写入文件
    ofstream outFile("pi_result.txt");
    if (outFile.is_open()) {
        outFile.precision(15);
        outFile << "=== 计算结果 ===" << endl;
        outFile << "计算值: " << result << endl;
        outFile << "\n精确π值（参考）: \n" << PI_REFERENCE << endl;
        outFile << "\n双精度参考值: " << PI << endl;
        outFile << "绝对误差: " << abs(result - PI) << endl;
        outFile << "计算耗时: " << duration.count() << " 秒" << endl;
        outFile.close();
        cout << "\n结果已保存至 pi_result.txt" << endl;
    }
    else {
        cerr << "无法写入文件！" << endl;
    }

    return 0;
}